{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"Home","text":"<p>Make your Unity characters hear, think, and talk \u2014 using real voice AI. Locally. No cloud.</p> <p>UnityNeuroSpeech is a lightweight and open-source framework for creating fully voice-interactive AI agents inside Unity. It connects:</p> <ul> <li>\ud83e\udde0 Whisper (STT) \u2013 converts your speech into text  </li> <li>\ud83d\udcac Ollama (LLM) \u2013 generates smart responses  </li> <li>\ud83d\udde3\ufe0f XTTS (TTS) \u2013 speaks back with custom voice + emotions</li> </ul> <p>All locally. All offline. No subscriptions, no accounts, no OpenAI API keys.</p>"},{"location":"#what-can-you-build-with-unityneurospeech","title":"\ud83d\ude80 What can you build with UnityNeuroSpeech?","text":"<ul> <li>\ud83c\udfae AI characters that understand your voice and reply in real time  </li> <li>\ud83d\uddff NPCs with personality and memory  </li> <li>\ud83e\uddea Experiments in AI conversation and narrative design  </li> <li>\ud83d\udd79\ufe0f Voice-driven gameplay mechanics  </li> <li>\ud83e\udd16 Interactive bots with humanlike voice responses</li> </ul>"},{"location":"#core-features","title":"\u2728 Core Features","text":"Feature Description \ud83c\udf99\ufe0f Voice Input Uses whisper.unity for accurate speech-to-text \ud83e\udde0 AI Brain (LLM) Easily connect to any local model via Ollama \ud83d\udde3\ufe0f Custom TTS Supports any voice with Coqui XTTS \ud83d\ude04 Emotions Emotion tags (<code>&lt;happy&gt;</code>, <code>&lt;sad&gt;</code>, etc.) parsed automatically from LLM \ud83c\udf9b\ufe0f Agent API Subscribe to events like <code>BeforeTTS()</code> or access <code>AgentState</code> directly \ud83d\udee0\ufe0f Editor Tools Create, manage and customize agents inside Unity Editor \ud83e\uddf1 No cloud All models and voice run locally on your machine \ud83c\udf10 Multilingual Works with over 15+ languages, including English, Russian, Chinese, etc."},{"location":"#built-with","title":"\ud83e\uddea Built with:","text":"<ul> <li>\ud83e\udde0 <code>Microsoft.Extensions.AI</code> (Ollama)</li> <li>\ud83c\udfa4 <code>whisper.unity</code></li> <li>\ud83d\udc0d Python Flask server (for TTS)</li> <li>\ud83e\uddca Coqui XTTS model</li> <li>\ud83e\udd16 Unity 6</li> </ul>"},{"location":"#get-started","title":"\ud83d\udcda Get Started","text":"<ul> <li>\ud83c\udfc1 Quick Start</li> <li>\u2699\ufe0f Configure Settings</li> <li>\ud83e\udde0 Create Agent</li> <li>\ud83d\udd0c Agent API</li> <li>\ud83d\udd0a Build Your Game</li> <li>\ud83d\udc0d About Python Server</li> <li>\u2753 FAQ</li> </ul>"},{"location":"#who-made-this","title":"\ud83d\ude0e Who made this?","text":"<p>UnityNeuroSpeech was created by HardCodeDev \u2014 indie dev from Russia who just wanted to make AI talk in Unity.</p>"},{"location":"#star-it-on-github","title":"\u2b50 Star it on GitHub","text":"<p>\ud83d\udc49 github.com/HardCodeDev777/UnityNeuroSpeech</p>"},{"location":"quickstart/","title":"\ud83d\ude80 Quick Start","text":""},{"location":"quickstart/#unity-requirements","title":"\u2705 Unity Requirements","text":"<ol> <li>com.whisper.unity must be installed. You can get it from the official GitHub repository.</li> <li>Add two sprites to your project (these are used for the \"microphone enabled\" and \"microphone disabled\" states).</li> <li>UnityNeuroSpeech is developed for Unity 6 (6000.0.47f1). Other versions might work, but Unity 6 is highly recommended.</li> </ol>"},{"location":"quickstart/#other-requirements","title":"\ud83d\udee0 Other Requirements","text":"<ol> <li>Ollama installed (along with any LLM you want to use).</li> <li>Python 3.11 installed.</li> <li>A downloaded Whisper model.</li> <li>At least one <code>.wav</code> file for voice cloning.</li> </ol>"},{"location":"quickstart/#what-are-these-tools","title":"\ud83d\udca1 What are these tools?","text":"<ul> <li>Ollama is a platform for running large language models (LLMs) locally. You can use models like DeepSeek, Gemma, Qwen, etc. Avoid small models\u2014they might affect accuracy and context understanding.</li> <li>Python 3.11 \u2014 use this specific version because it's stable and tested with this framework.</li> <li>Whisper is a speech-to-text model. You can use lightweight versions like <code>ggml-tiny.bin</code> for speed, or heavier ones like <code>ggml-medium.bin</code> for better accuracy.</li> </ul>"},{"location":"quickstart/#base-setup","title":"\u2699\ufe0f Base Setup","text":"<ol> <li> <p>Go to the UnityNeuroSpeech GitHub repository and download the following three files from the latest Release:</p> <ul> <li><code>UnityNeuroSpeech.X.X.X.zip</code> \u2013 main framework files</li> <li><code>TTSModel.zip</code> \u2013 pretrained XTTS model</li> <li><code>Setup.zip</code> - files for quick automatic setup</li> </ul> </li> <li> <p>Create a new empty folder anywhere on your computer (name it however you like).</p> </li> <li>Unpack <code>Setup.zip</code></li> <li> <p>Drag all the following into that folder:</p> <ul> <li>Contents from <code>Setup.zip</code></li> <li>Two other <code>.zip</code> archives mentioned above</li> </ul> </li> <li> <p>Run <code>RunPowershell.bat</code></p> </li> <li> <p>After setup finishes, you'll see a new folder <code>UnityNeuroSpeech X.X.X</code>. Open it and drag the <code>.unitypackage</code> into your Unity project. Do not move or import the other files. Keep them outside the Unity project folder.</p> </li> <li> <p>Place your <code>.wav</code> voice files into <code>Server/Voices</code>.    Each file must follow the naming pattern: <code>en_voice.wav</code>, <code>ru_voice.wav</code>, etc.</p> </li> <li> <p>In the <code>UnityNeuroSpeech</code> folder, you\u2019ll see an empty <code>Whisper/</code> folder. Drop your Whisper <code>.bin</code> model file into it.</p> </li> </ol> <p>Some folders (like <code>Whisper/</code>) may contain <code>.txt</code> placeholder files. These are only used to ensure Unity exports the folder. You can safely delete them after setup.</p> <p>\u2705 Done! You\u2019re ready to build your first talking AI agent.</p>"},{"location":"other/faq/","title":"\u2753 FAQ","text":""},{"location":"other/faq/#general","title":"\u2699\ufe0f General","text":""},{"location":"other/faq/#why-use-coqui-xtts-as-the-tts-model","title":"Why use Coqui XTTS as the TTS model?","text":"<p>Three main reasons:</p> <ul> <li> <p>Custom Voices.</p> <p>You can use any voice you want: your own, Cyn, Vito Corleone, Justin Timberlake \u2014 whatever. I believe that\u2019s way more flexible than static, pre-generated voices.</p> </li> <li> <p>License.</p> <p>Some TTS models have extremely restrictive licenses. For example, Silero TTS is under CC BY-NC-SA 4.0, which means: - You can\u2019t use it commercially. - Even worse: I\u2019d be forced to release this entire framework under the same license. That\u2019s a no-go.</p> </li> <li> <p>Simplicity.</p> <p>The Python server is just ~100 lines of code. It supports 10+ languages out of the box. You send a UnityWebRequest with text \u2014 it sends back .wav. That\u2019s it. No ONNX, no weird tensors, no converting text into token IDs, etc.</p> </li> </ul> <p>But if you hate Python or Coqui XTTS, you can integrate your favorite model. Modularity is the point. I won\u2019t stop you \ud83e\udd20</p>"},{"location":"other/faq/#python","title":"\ud83d\udc0d Python","text":""},{"location":"other/faq/#why-use-python-for-tts","title":"Why use Python for TTS?","text":"<p>I didn\u2019t really have a choice.</p> <p>Coqui XTTS only offers a Python API, and there are no stable C#, C++, C, TypeScript, JavaScript or Go bindings. If there had been a solid alternative in another language, I would\u2019ve gladly used it \u2014 but this is what we\u2019ve got.</p>"},{"location":"other/faq/#why-is-pythonexe-using-so-much-ram","title":"Why is Python.exe using so much RAM?","text":"<p>Because it\u2019s running a full neural TTS model \u2014 locally \u2014 in Python. That\u2019s the price you pay for realistic voices and multilingual support. If it bothers you \u2014 try switching to smaller models or optimize the server logic yourself.</p>"},{"location":"other/faq/#most-important-question","title":"\u2757 Most Important Question","text":""},{"location":"other/faq/#why-is-it-so-hard-to-configure-and-get-started","title":"Why is it so hard to configure and get started?","text":"<p>A totally fair question \u2014 especially after you\u2019ve gone through all the setup steps and seen how many pieces are involved.</p> <p>Here\u2019s the truth:</p> <p>UnityNeuroSpeech is the first \u2014 not just Unity, but game development framework \u2014 that allows you to talk to AI directly inside your game.</p> <p>The only out-of-the-box solution for Unity in this whole stack is whisper.unity.  And even then \u2014 you still need to create a separate <code>SetupWhisperPath.cs</code> script to make it work properly in builds. Yes, you can try using StreamingAssets, and whisper.unity supports that. But I personally prefer not to scatter files across multiple Unity folders. If that\u2019s critical for your project \u2014 feel free to try it with StreamingAssets.</p> <p>Now let\u2019s talk about Text-to-Speech...</p> <p>Frankly, there are no really \u201cclean\u201d or \u201ceasy\u201d TTS solutions \u2014 not just for Unity, but even for C# as a whole. (If you\u2019re curious about the deep rabbit hole of TTS licensing and tech, check out the Python Server page.)</p> <p>As for Ollama, I integrated it into Unity myself \u2014 using Microsoft\u2019s <code>Microsoft.Extensions</code> libraries.</p> <p>Yes \u2014 it does feel like a lot at first.</p> <p>But don\u2019t worry \u2014 UnityNeuroSpeech is actively being improved, and with every update, the setup process will become simpler and more automated.</p> <p>And maybe one day, this kind of tech will be built into Unity out of the box. You\u2019ll click a button, and boom \u2014 talking AI agents everywhere.</p> <p>But when that day comes... it won\u2019t be unique anymore.</p> <p>So if you want to stand out with a game that features real, emotional voice interaction powered by AI \u2014 now\u2019s your chance. Go for it \ud83d\ude0e</p>"},{"location":"other/licenses/","title":"\u2696\ufe0f Licenses","text":""},{"location":"other/licenses/#unityneurospeech","title":"UnityNeuroSpeech","text":"<p>UnityNeuroSpeech is licensed under the MIT License:</p> <pre><code>MIT License\n\nCopyright (c) 2025 HardCodeDev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"other/licenses/#whisperunitycomwhisperunity","title":"whisper.unity(com.whisper.unity)","text":"<p>whisper.unity is licensed under the MIT License:</p> <pre><code>MIT License\n\nCopyright (c) 2023 Macoron\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal \nin the Software without restriction, including without limitation the rights \nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell \ncopies of the Software, and to permit persons to whom the Software is \nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \nSOFTWARE.\n</code></pre>"},{"location":"other/licenses/#ollama","title":"Ollama","text":"<p>Ollama is licensed under the MIT License:</p> <pre><code>MIT License\n\nCopyright (c) Ollama\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"other/licenses/#coqui-xtts","title":"Coqui XTTS","text":"<p>Coqui XTTS is licensed under the MPL-2.0 License:</p> <pre><code>Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n</code></pre> <p>This webtise is made using MkDocs</p> <p>MkDocs is licensed under the BSD-2 Claude License:</p> <pre><code>Copyright \u00a9 2014-present, Tom Christie. All rights reserved.\n\nRedistribution and use in source and binary forms, with or\nwithout modification, are permitted provided that the following\nconditions are met:\n\nRedistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\nCONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\nUSE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\nAND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"other/server/","title":"\ud83d\udc0d Python Server","text":"<p>The Text-to-Speech model used in <code>UnityNeuroSpeech</code> is Coqui XTTS. To balance performance and usability, the framework runs it through a small Python script that launches a local server.</p> <p>Yes \u2014 this means you must start the Python server before running game.</p> <p>You can fully rewrite the TTS or server logic if you prefer. Check out <code>main.py</code>.</p>"},{"location":"unity/agent-api/","title":"\ud83d\udcdd Agent API","text":"<p>Easily trigger events based on your agent\u2019s emotion, response count, or message using the <code>UnityNeuroSpeech Agent API</code>.</p>"},{"location":"unity/agent-api/#handle-agent-state","title":"\ud83d\udd79\ufe0f Handle Agent State","text":"<p>The Agent API is simple and elegant \u2014 just 5 methods and 2 classes.</p> <p>To use <code>UnityNeuroSpeech Agent API</code> you need to: 1. Create a new MonoBehaviour script. 2. Add <code>using UnityNeuroSpeech.Runtime;</code> on top of your code. 3. Derive from <code>AgentBehaviour</code> class.</p> <p>Once you do that, you will need to implement three abstract methods:   - Start   - BeforeTTS   - AfterTTS   - AfterSTT</p> <p>Also, you need to create a field with your <code>YourAgentNameController</code> type (in this example, <code>AlexController</code>). Your code will look like this:</p> <pre><code>using UnityEngine;\nusing UnityNeuroSpeech.Runtime;\n\npublic class AlexBehaviour : AgentBehaviour\n{\n    [SerializeField] private AlexController _alexAgentController;\n\n    public override void AfterTTS() {}\n\n    public override void BeforeTTS(AgentState state) {}\n\n    public override void AfterSTT() {}\n\n    public override void Start() {}\n}\n</code></pre>"},{"location":"unity/agent-api/#methods-overview","title":"\ud83d\udd0d Methods Overview","text":"<ul> <li>AfterTTS - Called after the audio is played.</li> <li>BeforeTTS - Called before sending text to the TTS model.</li> <li>AfterSTT - Called after STT model transcribed microphone input.</li> <li>Start - Same as MonoBehaviour\u2019s Start(), but required. Use it to bind your behaviour to an agent:</li> </ul> <pre><code>public override void Start() =&gt; AgentManager.SetBehaviourToAgent(_alexAgentController, this);\n</code></pre>"},{"location":"unity/agent-api/#about-agentstate-struct","title":"\ud83d\udfe2 About AgentState struct:","text":"<ul> <li>responseCount: Number of total replies by the agent.</li> <li>emotion: Emotion tag parsed from the LLM response (e.g. \"happy\", \"sad\").</li> <li>agentMessage: Raw response from the LLM.</li> </ul>"},{"location":"unity/agent-api/#what-is-setbehaviourtoagent","title":"\ud83d\udca1 What is <code>SetBehaviourToAgent()</code>?","text":"<p><code>SetBehaviourToAgent</code> function connects your AgentBehaviour to the agent's internal hooks:</p> <pre><code>[HideInInspector] public Action&lt;AgentState&gt; BeforeTTS { get; set; }\n[HideInInspector] public Action AfterTTS { get; set; }\n[HideInInspector] public Action AfterSTT { get; set; }\n</code></pre> <p>This lets UnityNeuroSpeech know when to call your methods at the right moments.</p>"},{"location":"unity/agent-api/#iagent-interface","title":"\ud83e\udd14 <code>IAgent</code> interface","text":"<p>Also, you might notice <code>IAgent</code> interface. You don\u2019t need to use this interface yourself, because it powers the core subscription logic.</p>"},{"location":"unity/agent-api/#example","title":"\ud83d\uddd2\ufe0f Example","text":"<pre><code>using UnityEngine;\nusing UnityNeuroSpeech.Runtime;\n\npublic class AlexBehaviour : AgentBehaviour\n{\n    [SerializeField] private AlexController _alexAgentController;\n\n    public override void AfterTTS() {}\n\n    public override void BeforeTTS(AgentState state)\n    {\n        if(state.responseCount == 5)\n        {\n            if (state.emotion == \"happy\") Debug.Log(\"AI is happy\");\n            else if (state.emotion == \"sad\") Debug.Log(\"AI is not happy...\");\n        }\n    }\n\n    public override void AfterSTT() {}\n\n    public override void Start() =&gt; AgentManager.SetBehaviourToAgent(_alexAgentController, this);\n}\n</code></pre> <p>Don't forget to attach your behaviour script to any <code>GameObject</code> in your scene.</p>"},{"location":"unity/agent-api/#full-api-reference","title":"\ud83d\udc40 Full API Reference","text":"<p><code>AgentUtils.cs</code>:</p> <pre><code>// Handy utility script for keeping small agent-related features together instead of splitting them across many files\n\nusing System;\nusing UnityEngine;\n\nnamespace UnityNeuroSpeech.Runtime\n{\n    /// &lt;summary&gt;\n    /// Interface used to identify agents and allow &lt;see cref=\"AgentBehaviour\"/&gt; to subscribe to agent Actions\n    /// &lt;/summary&gt;\n    public interface IAgent\n    {\n        public Action&lt;AgentState&gt; BeforeTTS { get; set; }\n        public Action AfterTTS { get; set; }\n        public Action AfterSTT { get; set; }\n    }\n\n    /// &lt;summary&gt;\n    /// Base class to define agent behavior\n    /// &lt;/summary&gt;\n    public abstract class AgentBehaviour : MonoBehaviour\n    {\n        /// &lt;summary&gt;\n        /// Use this to bind the behaviour script to an agent.\n        /// Recommended: &lt;see cref=\"AgentManager.SetBehaviourToAgent{T}(T, AgentBehaviour)\"/&gt;\n        /// &lt;/summary&gt;\n        public abstract void Start();\n\n        /// &lt;summary&gt;\n        /// Called before sending input to the Text-To-Speech model\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"state\"&gt;Current agent state&lt;/param&gt;\n        public abstract void BeforeTTS(AgentState state);\n\n        /// &lt;summary&gt;\n        /// Called after receiving and playing the Text-To-Speech response\n        /// &lt;/summary&gt;\n        public abstract void AfterTTS();\n\n        /// &lt;summary&gt;\n        /// Called after Speech-To-Text transcription\n        /// &lt;/summary&gt;\n        public abstract void AfterSTT();\n    }\n\n    /// &lt;summary&gt;\n    /// Lightweight structure representing the agent's internal state\n    /// &lt;/summary&gt;\n    public readonly struct AgentState\n    {\n        /// &lt;summary&gt;\n        /// Total number of responses generated so far\n        /// &lt;/summary&gt;\n        public readonly int responseCount;\n        /// &lt;summary&gt;\n        /// Agent's message (currently just the response from Ollama)\n        /// &lt;/summary&gt;\n        public readonly string agentMessage;\n        /// &lt;summary&gt;\n        /// Emotion tag parsed from the response. It's a string like \"happy\", \"sad\", etc.\n        /// &lt;/summary&gt;\n        public readonly string emotion;\n\n        public AgentState(int responseCount, string agentMessage, string emotion)\n        {\n            this.responseCount = responseCount;\n            this.agentMessage = agentMessage;\n            this.emotion = emotion;\n        }\n    }\n}\n</code></pre> <p><code>AgentManager.cs</code>:</p> <pre><code>/// &lt;summary&gt;\n/// Centralized manager for agents\n/// &lt;/summary&gt;\npublic static class AgentManager\n{\n    /// &lt;summary&gt;\n    /// Binds a behaviour script to an agent\n    /// &lt;/summary&gt;\n    /// &lt;typeparam name=\"T\"&gt;Generated agent controller&lt;/typeparam&gt;\n    /// &lt;param name=\"agent\"&gt;Agent instance&lt;/param&gt;\n    /// &lt;param name=\"beh\"&gt;Behaviour to attach&lt;/param&gt;\n    public static void SetBehaviourToAgent&lt;T&gt;(T agent, AgentBehaviour beh) where T: MonoBehaviour, IAgent\n    {\n        agent.BeforeTTS += beh.BeforeTTS;\n        agent.AfterTTS += beh.AfterTTS;\n        agent.AfterSTT += beh.AfterSTT;\n    }\n}\n</code></pre> <p>\ud83d\ude0e You now have full control over your agents!</p> <p>Design smart behaviours, react to emotions, and go full sentient AI \ud83e\udd16</p> <p>UnityNeuroSpeech puts the power in your hands.</p>"},{"location":"unity/building-game/","title":"\ud83c\udfd7\ufe0f Buidling Game","text":"<p>You can\u2019t just hit <code>Build</code> and expect UnityNeuroSpeech to work out of the box in your final game build. But don\u2019t worry \u2014 it takes less than a minute to set it up properly.</p>"},{"location":"unity/building-game/#adding-whisper-files-in-build-folder","title":"\ud83d\udcc1 Adding Whisper files in build folder","text":"<p>After building your game, go to the <code>Managed</code> folder.</p> <p>There, create folders that match value you set in the <code>SceneManagerCreation</code> window in <code>Model path</code> field.</p>"},{"location":"unity/building-game/#example-1","title":"\ud83d\uddd2\ufe0f Example 1","text":"<p>If you wrote: <code>UnityNeuroSpeech/Whisper/ggml-medium.bin</code> Then create a <code>UnityNeuroSpeech</code> folder \u2192 inside it, a <code>Whisper</code> folder \u2192 then put your model <code>.bin</code> file in there.</p>"},{"location":"unity/building-game/#example-2","title":"\ud83d\uddd2\ufe0f Example 2","text":"<p>If you wrote: <code>Imports/Frameworks/UnityNeuroSpeech/Whisper/ggml-medium.bin</code> Then replicate that entire folder structure.</p>"},{"location":"unity/building-game/#adding-server-folder-in-build-folder","title":"\ud83d\udcc1 Adding <code>Server</code> folder in build folder","text":"<p>Just drag the entire <code>Server</code> folder (from the UnityNeuroSpeech zip) into your game\u2019s build folder.</p> <p>Also, don\u2019t forget to include the <code>run_server.bat</code> file. You\u2019ll need to run this <code>.bat</code> file every time you launch the game.</p>"},{"location":"unity/building-game/#tip-make-a-startup-script","title":"\ud83d\udca1 Tip: Make a Startup Script","text":"<p>You can make a simple <code>.bat</code> file that launches both the TTS server and the game:</p> <pre><code>@echo off\nstart run_server.bat\nstart YouGameName.exe\n</code></pre> <p>\u2705 That\u2019s it! Now your AI agents will talk even in the final build.</p> <p>Have fun! :)</p>"},{"location":"unity/configure-settings/","title":"\u2699\ufe0f Configure Settings","text":"<p>To use UnityNeuroSpeech, you will need to configure some initial settings. Don\u2019t worry \u2014 it only takes a few minutes.</p>"},{"location":"unity/configure-settings/#opening-the-settings","title":"\ud83d\udee0 Opening the Settings","text":"<p>Go to UnityNeuroSpeech \u2192 Create Settings in the Unity toolbar. You\u2019ll see the window with these settings:</p>"},{"location":"unity/configure-settings/#general","title":"\ud83d\udd25 General","text":"Setting Description Logging type Controls how much info you want to see in the Unity console Not in Assets folder Check this if you moved the framework folder outside the default location Directory name For example: if your folder path is <code>Assets/MyImports/Frameworks</code>, enter <code>MyImports/Frameworks</code>"},{"location":"unity/configure-settings/#agents","title":"\ud83e\udd16 Agents","text":"Setting Description Emotions Add at least one emotion. These are passed to the LLM Request timeout(secs) Timeout for requests to local TTS Python server"},{"location":"unity/configure-settings/#python","title":"\ud83d\udc0d Python","text":"Setting Description Enable Python debug Enables debug for local TTS Python server Absolute path to main.py Full path to <code>main.py</code> in <code>Server/</code> folder"},{"location":"unity/configure-settings/#advanced","title":"\ud83d\ude0e Advanced","text":"Setting Description Custom Ollama URI If empty, Ollama URI will be default \"localhost:11434\" Custom TTS URI If empty, TTS URI will be default \"localhost:7777\" <p>\ud83d\udcdd When you're done, click Save. Now you can work with UnityNeuroSpeech and start setting up your scene!</p>"},{"location":"unity/creating-agent/","title":"\ud83e\udde0 Creating Agent","text":"<p>Agent in UnityNeuroSpeech is a GameObject that can listen, talk, and respond using LLMs. Once you create your first agent, you\u2019ll be able to speak with your AI!</p> <p>Before creating agent make sure you have any two sprites. They're used for Microphone state(enabled/disabled).</p>"},{"location":"unity/creating-agent/#scene-setup","title":"\u2705 Scene Setup","text":"<ol> <li>Add a <code>Button</code> to your scene.</li> <li>Add an <code>AudioSource</code> to your scene.</li> </ol>"},{"location":"unity/creating-agent/#opening-agent-settings","title":"\ufe0f\u2699\ufe0f Opening Agent settings","text":"<p>Go to UnityNeuroSpeech \u2192 Create Agent. You will see the window with these settings:</p>"},{"location":"unity/creating-agent/#agent-parameters","title":"\ud83d\udc64 Agent Parameters","text":"Setting Description Model name Name of the LLM you downloaded via Ollama Agent name Internal name for your agent. Avoid spaces or dashes System prompt Base prompt used to control the AI\u2019s behavior and tone"},{"location":"unity/creating-agent/#agent-component-values","title":"\ud83d\udc64 Agent Component Values","text":"Setting Description Microphone enable button Button you created before Enabled microphone sprite Sprite for enabled microphone Disabled microphone sprite Sprite for disabled microphone Response audiosource AudioSource you created before <p>\ud83d\udcdd When you're done, click Generate agent. After scripts compilation click Create agent in scene.</p>"},{"location":"unity/creating-agent/#start-the-tts-server","title":"\ud83d\udd04 Start the TTS Server","text":"<p>Run the <code>run_server.bat</code> file. \u26a0\ufe0f It must be in the same directory as the <code>Server</code> folder (i.e., not inside it).</p> <p>\ud83c\udf89 That\u2019s it! When you run the game:</p> <ul> <li>Select a microphone in the dropdown  </li> <li>Click the button to start recording  </li> <li>Speak \u2192 click again  </li> <li>AI responds with voice</li> </ul>"},{"location":"unity/creating-agent/#tip","title":"\ud83c\udfa7 Tip","text":"<p>The response delay depends on:</p> <ul> <li>LLM model size</li> <li>Whisper model speed</li> <li>TTS processing time</li> </ul>"},{"location":"unity/creating-uns-manager/","title":"\u2699\ufe0f Creating UNS Manager","text":"<p>UnityNeuroSpeech Manager controls non-agent scripts. Without it, agent won't work. </p>"},{"location":"unity/creating-uns-manager/#scene-setup","title":"\u2705 Scene Setup","text":"<ol> <li>Add a <code>Dropdown</code> with at least three options to your scene.</li> </ol>"},{"location":"unity/creating-uns-manager/#opening-uns-manager-settings","title":"\ufe0f\u2699\ufe0f Opening UNS Manager settings","text":"<p>Go to UnityNeuroSpeech \u2192 Scene Manager Creation. You will see the window with these settings:</p>"},{"location":"unity/creating-uns-manager/#unityneurospeech-manager-settings","title":"\ud83d\uddd2\ufe0f UnityNeuroSpeech manager settings","text":"Setting Description Microphone Dropdown Dropdown created before Whisper Model Path Without \"Assets\" directory. For example: \"UnityNeuroSpeech/Whisper/ggml-medium.bin\" <p>In one scene can only be one UNS Manager.</p> <p>\ud83d\udcdd When you're done, click Create UnityNeuroSpeech manager in scene. You can now create your first talkable agent!</p>"}]}